C51 COMPILER V9.60.0.0   LCD1602                                                           07/09/2021 14:56:03 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE LCD1602
OBJECT MODULE PLACED IN .\list\lcd1602.obj
COMPILER INVOKED BY: D:\51\C51\BIN\C51.EXE lcd1602.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\list\lcd1602.ls
                    -t) OBJECT(.\list\lcd1602.obj)

line level    source

   1          #include "lcd1602.h"
   2          
   3          
   4          
   5          
   6          
   7          void LCD_init(void)
   8          {
   9   1      delay_n10us(10);
  10   1      LCD_write_command(0x38);//设置8位格式，2行，5x7
  11   1      delay_n10us(10);
  12   1      LCD_write_command(0x0c);//整体显示，关光标，不闪烁
  13   1      delay_n10us(10);
  14   1      LCD_write_command(0x06);//设定输入方式，增量不移位
  15   1      delay_n10us(10);
  16   1      LCD_write_command(0x01);//清除屏幕显示
  17   1      delay_n10us(100);       //延时清屏，延时函数，延时约n个10us
  18   1      }
  19          
  20          
  21          void LCD_write_command(uchar dat)
  22          {
  23   1      delay_n10us(10);
  24   1      LCD_RS=0;         //指令
  25   1      LCD_RW=0;         //写入
  26   1      LCD_E=1;          //允许
  27   1      LCD_DB=dat;
  28   1      delay_n10us(10);  //
  29   1      LCD_E=0;
  30   1      delay_n10us(10);  //。
  31   1      }
  32          
  33          
  34          void LCD_write_data(uchar dat)
  35          {
  36   1      delay_n10us(10);
  37   1      LCD_RS=1;          //数据
  38   1      LCD_RW=0;          //写入
  39   1      LCD_E=1;           //允许
  40   1      LCD_DB=dat;
  41   1      delay_n10us(10);
  42   1      LCD_E=0;
  43   1      delay_n10us(10);
  44   1      }
  45          
  46          
  47          
  48          void LCD_disp_char(uchar x,uchar y,uchar dat)
  49          {
  50   1        uchar address;
  51   1        if(y==1)
  52   1               address=0x80+x;
  53   1        else
  54   1               address=0xc0+x;
C51 COMPILER V9.60.0.0   LCD1602                                                           07/09/2021 14:56:03 PAGE 2   

  55   1        LCD_write_command(address);
  56   1        LCD_write_data(dat);
  57   1      }
  58          
  59          
  60          
  61          void LCD_disp_str(uchar x,uchar y,uchar *str)
  62          {
  63   1        uchar address;
  64   1        if(y==1)
  65   1               address=0x80+x;
  66   1        else
  67   1               address=0xc0+x;
  68   1        LCD_write_command(address);
  69   1        while(*str!='\0')
  70   1        { 
  71   2          LCD_write_data(*str);   
  72   2          str++;
  73   2        }
  74   1      }
  75          
  76          
  77          
  78          void delay_n10us(uint n)  //延时n个10us@12M晶振
  79          {       
  80   1              uint i;           
  81   1              for(i=n;i>0;i--)    
  82   1              {
  83   2              _nop_();_nop_();_nop_();_nop_();_nop_();_nop_(); 
  84   2                      }
  85   1      }                                    
  86          
  87          
  88          
  89          
  90          typedef union  
  91          { unsigned int i;      //定义了两个共用体
  92            float f; 
  93          } value; 
  94          
  95          enum {TEMP,HUMI};      //TEMP=0,HUMI=1
  96           
  97          
  98          
  99          
 100          
 101          void s_transstart(void) 
 102          
 103          {   
 104   1         DATA=1; SCK=0;                   //Initial state 
 105   1         _nop_(); 
 106   1         SCK=1; 
 107   1         _nop_(); 
 108   1         DATA=0; 
 109   1         _nop_(); 
 110   1         SCK=0;   
 111   1         _nop_();_nop_();_nop_(); 
 112   1         SCK=1; 
 113   1         _nop_(); 
 114   1         DATA=1;        
 115   1         _nop_(); 
 116   1         SCK=0;        
C51 COMPILER V9.60.0.0   LCD1602                                                           07/09/2021 14:56:03 PAGE 3   

 117   1      } 
 118          
 119          
 120          void s_connectionreset(void) 
 121          
 122          {   
 123   1        unsigned char i;  
 124   1        DATA=1; SCK=0;                    //Initial state 
 125   1        for(i=0;i<9;i++)                  //9 SCK cycles 
 126   1        { 
 127   2          SCK=1;
 128   2          SCK=0; 
 129   2        } 
 130   1        s_transstart();                   //transmission start 
 131   1      } 
 132          
 133          
 134          
 135          char s_write_byte(unsigned char value) 
 136          //---------------------------------------------------------------------------------- 
 137          // writes a byte on the Sensibus and checks the acknowledge  
 138          {  
 139   1        unsigned char i,error=0;   
 140   1        for (i=0x80;i>0;i/=2)             //shift bit for masking 
 141   1        {  
 142   2          if (i & value) DATA=1;          //masking value with i , write to SENSI-BUS 
 143   2          else DATA=0;                         
 144   2          SCK=1;                          //clk for SENSI-BUS 
 145   2          _nop_();_nop_();_nop_();        //pulswith approx. 3 us     
 146   2          SCK=0; 
 147   2        } 
 148   1        DATA=1;                           //release DATA-line 
 149   1        SCK=1;                            //clk #9 for ack  
 150   1        error=DATA;                       //check ack (DATA will be pulled down by DHT90),DATA在第9个上升沿将被D
             -HT90自动下拉为低电平。 
 151   1        _nop_();_nop_();_nop_();
 152   1        SCK=0;
 153   1        DATA=1;                           //release DATA-line 
 154   1        return error;                     //error=1 in case of no acknowledge //返回：0成功，1失败
 155   1      } 
 156           
 157          
 158          
 159          char s_read_byte(unsigned char ack)  
 160          // reads a byte form the Sensibus and gives an acknowledge in case of "ack=1"  
 161          {  
 162   1        unsigned char i,val=0; 
 163   1        DATA=1;                           //release DATA-line 
 164   1        for (i=0x80;i>0;i/=2)             //shift bit for masking 
 165   1        { SCK=1;                          //clk for SENSI-BUS 
 166   2          if (DATA) val=(val | i);        //read bit   
 167   2              _nop_();_nop_();_nop_();        //pulswith approx. 3 us
 168   2          SCK=0;              
 169   2        } 
 170   1        if(ack==1)DATA=0;                 //in case of "ack==1" pull down DATA-Line 
 171   1        else DATA=1;                      //如果是校验(ack==0)，读取完后结束通讯
 172   1        _nop_();_nop_();_nop_();          //pulswith approx. 3 us 
 173   1        SCK=1;                            //clk #9 for ack 
 174   1        _nop_();_nop_();_nop_();          //pulswith approx. 3 us  
 175   1        SCK=0;                 
 176   1        _nop_();_nop_();_nop_();          //pulswith approx. 3 us 
 177   1        DATA=1;                           //release DATA-line 
C51 COMPILER V9.60.0.0   LCD1602                                                           07/09/2021 14:56:03 PAGE 4   

 178   1        return val; 
 179   1      } 
 180           
 181          
 182           
 183          
 184          
 185          char s_measure(unsigned char *p_value, unsigned char *p_checksum, unsigned char mode) 
 186          // makes a measurement (humidity/temperature) with checksum 
 187          {  
 188   1        unsigned error=0; 
 189   1        unsigned int i; 
 190   1       
 191   1        s_transstart();                   //transmission start 
 192   1        switch(mode){                     //send command to sensor 
 193   2          case TEMP  : error+=s_write_byte(MEASURE_TEMP); break; 
 194   2          case HUMI  : error+=s_write_byte(MEASURE_HUMI); break; 
 195   2          default     : break;    
 196   2        } 
 197   1        for (i=0;i<65535;i++) if(DATA==0) break; //wait until sensor has finished the measurement 
 198   1        if(DATA) error+=1;                // or timeout (~2 sec.) is reached 
 199   1        *(p_value)  =s_read_byte(ACK);    //read the first byte (MSB) 
 200   1        *(p_value+1)=s_read_byte(ACK);    //read the second byte (LSB) 
 201   1        *p_checksum =s_read_byte(noACK);  //read checksum 
 202   1        return error; 
 203   1      } 
 204           
 205          
 206          
 207          void calc_dht90(float *p_humidity ,float *p_temperature)
 208          // calculates temperature [C] and humidity [%RH] 
 209          // input :  humi [Ticks] (12 bit) 
 210          //          temp [Ticks] (14 bit)
 211          // output:  humi [%RH]
 212          //          temp [C]
 213          { const float C1=-4.0;              // for 12 Bit
 214   1        const float C2=+0.0405;           // for 12 Bit
 215   1        const float C3=-0.0000028;        // for 12 Bit
 216   1        const float T1=+0.01;             // for 14 Bit @ 5V
 217   1        const float T2=+0.00008;           // for 14 Bit @ 5V 
 218   1      
 219   1        float rh=*p_humidity;             // rh:      Humidity [Ticks] 12 Bit 
 220   1        float t=*p_temperature;           // t:       Temperature [Ticks] 14 Bit
 221   1        float rh_lin;                     // rh_lin:  Humidity linear
 222   1        float rh_true;                    // rh_true: Temperature compensated humidity
 223   1        float t_C;                        // t_C   :  Temperature [C]
 224   1      
 225   1        t_C=t*0.01 - 40;                  //calc. temperature from ticks to [C]
 226   1        rh_lin=C3*rh*rh + C2*rh + C1;     //calc. humidity from ticks to [%RH]
 227   1        rh_true=(t_C-25)*(T1+T2*rh)+rh_lin-3;   //calc. temperature compensated humidity [%RH]
 228   1        if(rh_true>100)rh_true=100;       //cut if the value is outside of
 229   1        if(rh_true<0.1)rh_true=0.1;       //the physical possible range
 230   1      
 231   1        *p_temperature=t_C;               //return temperature [C]
 232   1        *p_humidity=rh_true;              //return humidity[%RH]
 233   1      }
 234          
 235          
 236          //value humi_val,temp_val;
 237          //          unsigned char error,checksum; 
 238          //        unsigned int wendu,shidu;
 239          //void dht(void)
C51 COMPILER V9.60.0.0   LCD1602                                                           07/09/2021 14:56:03 PAGE 5   

 240          //{
 241          //        
 242          //            error=0; 
 243          //          error+=s_measure((unsigned char*) &humi_val.i,&checksum,HUMI);  //measure humidity 
 244          //          error+=s_measure((unsigned char*) &temp_val.i,&checksum,TEMP);  //measure temperature 
 245          //          if(error!=0) s_connectionreset();                 //in case of an error: connection reset 
 246          //          else 
 247          //          { humi_val.f=(float)humi_val.i;                   //converts integer to float
 248          //            temp_val.f=(float)temp_val.i;                   //converts integer to float
 249          //            calc_dht90(&humi_val.f,&temp_val.f);            //calculate humidity, temperature
 250          //                      wendu=10*temp_val.f;
 251          //                      //LCD_disp_char(2,1,wendu/1000+'0');              //显示温度百位
 252          //            LCD_disp_char(3,1,(wendu%1000)/100+'0');        //显示温度十位
 253          //            LCD_disp_char(4,1,(wendu%100)/10+'0');          //显示温度个位
 254          //                      LCD_disp_char(6,1,(wendu%10)+'0');              //显示温度小数点后第一位
 255          
 256          //                      shidu=10*humi_val.f;
 257          //                      //LCD_disp_char(2,2,shidu/1000+'0');               //显示湿度百位
 258          //            LCD_disp_char(3,2,(shidu%1000)/100+'0');         //显示湿度十位
 259          //            LCD_disp_char(4,2,(shidu%100)/10+'0');           //显示湿度个位
 260          //                      LCD_disp_char(6,2,(shidu%10)+'0');               //显示湿度小数点后第一位
 261          //          } 
 262          //          //----------wait approx. 0.8s to avoid heating up SHTxx------------------------------       
 263          //                delay_n10us(80000);                                //延时约0.8s
 264          //}


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    922    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      63
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
